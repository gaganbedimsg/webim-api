package webim;

import java.net.HttpURLConnection;
import java.net.HttpURLconn;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;

public class Client {
	
	private int port;
	private User user;
	private String domain;
	private String apikey;
	private String host;
	private String ticket = "";

	public Client(User user, String domain, String apikey, String host, int port) {
		this.user = user;
		this.domain = domain;
		this.apikey = apikey;
		this.host = host;
		this.port = port;
	}
	
	private Map<String, String> newData() {
		Map<String, String> data = new HashMap<String,String>();
		data.put("version",  WebIM.APIVSN);
		data.put("domain", domain);
		data.put("apikey", apikey);
		data.put("ticket", ticket);
		return data;
	}
	
	public JSONObject online(List<String> buddies, List<String> groups) 
		throws WebIMException {
		Map<String, String> data = newData();
		data.put("groups", this.commaJoin(groups)); 
		data.put("buddies", this.commaJoin(buddies));
		data.put("name", user.id);
		data.put("nick", user.nick);
		data.put("status", user.status);
		data.put("show", user.show);
		
		String body = this.httpost("/presences/online", data);	    
		//	    if(status != 200):
		//	      return {'success': False, 'error_msg': body}
		JSONObject obj = new JSONObject(body);
		return obj;
		//
//		//	    self.ticket = respdata['ticket']
//		//	    conninfo = {'ticket': self.ticket,
//			                'domain': self.domain,
//			                'server': "http://%s:%d/packets" % (self.host, self.port)}
//			    return {'success': True,
//			            'conn': conninfo,
//			            'buddies': respdata['buddies'],
//			            'groups': respdata['groups'],
//			            'server_time': 100101, #FIXME:
//			            'user': self.user}

	}	

	public String offline() {
		Map<String, String> data = newData();
		data.put("ticket", this.ticket);
		this.httpost("/presences/offline", data);
		//TODO: FIXME LATER
		return "ok";
	}
		
	public String publish(Status status) {
		Map<String, String> data = newData();
		data.put("nick", user.nick);
		status.feed(data);
		httpost("/presences/show", data);
		return "ok";
	}
	
	public String publish(Presence presence) {
		Map<String, String> data = newData();
		data.put("nick", user.nick);
		presence.feed(data);
		return "ok";
	}
	
	public String publish(Message message) {
		Map<String, String> data = newData();
		message.feed(data);
		httpost("/messages", data);
		return "ok";
	}
	
	public JSONObject members(String grpid) {
		Map<String, String> data = newData();
		data.put("group", grpid);
		httpost("/group/members", data);
		//if(status == 200) {
		//	return JSonObject(body)
		//}
		//TODO: fixme
		return new JSONObject("{}");
	}
	
	public JSONObject join(String grpid) {
		Map<String, String> data = newData();
		data.put("nick", user.nick);
		data.put("group", grpid);
		httpost("/group/join", data);
		return new JSONObject(String.format(
				"{'id': %s, 'count': %d}", grpid, 0));
	}
	
	public String leave(String grpid) {
		Map<String, String> data = newData();
		data.put("nick", user.nick);
		data.put("group", grpid);
		return "ok";
	}
	
	public String encodeData(Map<String, String> data) {
		List<String> list = new ArrayList<String>();
		Iterator it = data.entrySet().iterator();
		while(it.hasNext()) {
			Map.Entry<String, String> pair = (Map.Entry<String, String>)it.next();
			list.add(pair.getKey()+"="+URLEncoder.encode(pair.getValue()));
		}
		return listJoin("&", list);
	}
	
	private String httpost(String path, Map<String, String> data) 
			throws Exception {
		URL url;
		HttpURLConnection conn = null;  
		try {
		    //Create connetion
			url = new URL(apiurl(path));
		    conn = (HttpURLConnection)url.openConnection();
		    conn.setRequestMethod("POST");
		    conn.setRequestProperty("Content-Type", 
		           "application/x-www-form-urlencoded");
			
		    String urlParameters = encodeData(data);
		    conn.setRequestProperty("Content-Length", "" + 
		               Integer.toString(urlParameters.getBytes().length));
		      conn.setRequestProperty("Content-Language", "en-US");  
					
		      conn.setUseCaches (false);
		      conn.setDoInput(true);
		      conn.setDoOutput(true);

		      //Send request
		      DataOutputStream wr = new DataOutputStream (
		                  conn.getOutputStream ());
		      wr.writeBytes (urlParameters);
		      wr.flush ();
		      wr.close ();

		      //Get Response	
		      InputStream is = conn.getInputStream();
		      BufferedReader rd = new BufferedReader(new InputStreamReader(is));
		      String line;
		      StringBuffer response = new StringBuffer(); 
		      while((line = rd.readLine()) != null) {
		        response.append(line);
		        response.append('\r');
		      }
		      rd.close();
		      return response.toString();

		    } catch (Exception e) {

		      e.printStackTrace();
		      return null;

		    } finally {

		      if(conn != null) {
		        conn.disconnect(); 
		      }
		    }
		  }
		  ...
		
		
		
		return "ok";
	} 
		
	private String commaJoin(List<String> groups) {
		boolean first = true;
		StringBuilder sb = new StringBuilder();
		for(int i = 0; i < groups.size(); i++) {
			if(first) {
				sb.append(groups.get(i));
				first = false;
			} else {
				sb.append(",");
				sb.append(groups.get(i));
			}
		}
		return sb.toString();
	}
	
	private String apiurl(String path) {
		if(!path.startsWith("/")) {
			path = "/" + path;
		}
		return "http://" + this.host + ":" + Integer.toString(this.port) + WebIM.APIVSN + path; 
	}

}
